def forward(self, cues, mixture):
    """
    Forward pass of the EI model.

    Args:
        cues (torch.Tensor): Takes activations of every layer at the last timestep of the cue phase
        mixture (torch.Tensor): Takes activation of one layer at an arbitrary timestep of the mixture phase

    Returns:
        torch.Tensor: The output after applying modulation to the mixture input.

    Pseudocode:
    Create empty list upsamples_cues
    For cue in cues
        Upsample cue to size of mixture
        Append cue to upsampled cues    
    Concatenate upsampled_cues along channel dimension
    Pass cues through arbitrary function (in this case a two layer conv net)
    Sigmoid transformed cues
    Element-wise multiply sigmoided cues by the mixture
    Return this product
    """
    
    upsampled_cues = []
    for cue in cues:
        upsampled_cues.append(self.upsample(cue))
    cue = torch.cat(upsampled_cues, dim=1)
    cue = self.activation(self.conv1(cue))
    cue = self.conv2(cue)
    cue = torch.sigmoid(cue)
    return mixture * cue